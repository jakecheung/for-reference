#!/bin/bash

# PR编号
PR_NUMBER=687

# 忽略删除的文件或目录列表
IGNORE_DELETE_LIST=(
    "path/to/ignore1"
    "path/to/ignore2"
    # 添加更多忽略的路径
)

# 检查git是否已经初始化
if [ ! -d ".git" ]; then
    echo "Error: This script must be run from within a git repository."
    exit 1
fi

# 拉取最新的远程分支信息
echo "Fetching latest remote branches..."
git fetch --all

# 检查当前是否在dev分支
if [ "$(git rev-parse --abbrev-ref HEAD)" != "dev" ]; then
    echo "Error: You must be on the 'dev' branch to run this script."
    exit 1
fi

# 基于远端dev分支创建新分支uat_auto
echo "Creating a new branch 'uat_auto' based on remote 'dev' branch..."
git checkout -b uat_auto origin/dev

# 检出PR编号对应的变更
echo "Checking out changes from PR #$PR_NUMBER..."
git fetch origin pull/$PR_NUMBER/head:pr_$PR_NUMBER

# 获取PR变更的文件列表
echo "Getting list of changed files from PR #$PR_NUMBER..."
changed_files=$(git diff --name-only dev...pr_$PR_NUMBER)

# 删除未在PR中变更的文件，除了忽略列表中的文件
echo "Deleting files that are not part of PR #$PR_NUMBER..."
for file in $(find . -type f ! -path ".git/*"); do
    if ! echo "$changed_files" | grep -q "$file"; then
        # 检查文件是否在忽略列表中
        IGNORE=0
        for ignore_path in "${IGNORE_DELETE_LIST[@]}"; do
            if [[ "$file" == "$ignore_path" || "$file" == "$ignore_path/"* ]]; then
                IGNORE=1
                break
            fi
        done

        if [ $IGNORE -eq 0 ]; then
            echo "Deleting: $file"
            rm "$file"
        else
            echo "Skipping deletion of ignored file: $file"
        fi
    fi
done

# 将PR变更的文件添加到暂存区
echo "Staging changed files from PR #$PR_NUMBER..."
git add $changed_files

# 提交变更
echo "Committing changes..."
git commit -m "Merge PR #$PR_NUMBER into uat_auto, keeping only changed files"

# 推送新分支到远程仓库
echo "Pushing 'uat_auto' branch to remote..."
git push -u origin uat_auto

echo "PR #$PR_NUMBER has been processed. Only changed files are kept in the new branch 'uat_auto'."
